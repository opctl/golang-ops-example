name: dev
description: runs go-svc for development
inputs:
  srcDir:
    dir:
      default: ./
  MYSQL_USER:
    string:
      default: testuser
      description: username for MySQL user to create
  MYSQL_PASSWORD:
    string:
      default: testpassword
      description: password for MySQL user to create
  MYSQL_DATABASE:
    string:
      default: testapp
      description: Database to create
  MYSQL_HOST:
    string:
      default: mysql # the host for mysql is the container name in the mysql op
run:
  parallel:
    - op:
        ref: ../mysql # we reference the mysql op using its relative path to this op
        inputs: { MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_DATABASE, doSeed: true} # we pass the relevant inputs through to the mysql op
    - serial:
      - op:
          ref: ../init
          inputs: { srcDir }
      - container:
          image: { ref: 'golang:1.10.3' }
          name: go-svc
          dirs:
            /go: $(srcDir/vendor)
            /go/src/go-srv: $(srcDir/app)
          envVars: {MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_DATABASE} # the same inputs are needed to let our code know how to connect to the DB
          workDir: /go/src/go-srv
          ports: { '8080': '8080' }
          cmd:
            - sh
            - -ce
            - |
              sleep 30 # we'll sleep while the MySQL DB starts
              /go/bin/reflex -g 'main.go' -s -- sh -c 'go run main.go' # then we'll run reflex to watch main.go and run go run whenever it changes