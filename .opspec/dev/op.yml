name: dev
description: runs go-svc for development
inputs:
  MYSQL_USER:
    string:
      default: testuser
      description: username for MySQL user to create
  MYSQL_PASSWORD:
    string:
      default: testpassword
      description: password for MySQL user to create
  MYSQL_DATABASE:
    string:
      default: testapp
      description: Database to create
  MYSQL_HOST:
    string:
      default: mysql # the host for mysql is the container name in the mysql op
run:
  parallel:
    - op:
        ref: ../mysql # we reference the mysql op using its relative path to this op
        inputs: { MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_DATABASE, doSeed: true} # we pass the relevant inputs through to the mysql op
    - container:
        image: { ref: 'golang:1.10.3' }
        name: go-svc
        dirs:
          /go/src/github.com/golang-ops-example: $(/app) # IMPORTANT: we've created a symlink in the root of the op (i.e. at /.opspec/dev) to the source code of our app (i.e. at /app) - this is so we can encapsulate the op, meaning that any files the op needs to reference now are accessible from within its directory. we reference that symlink here as /app because that refers to the root of the op - see https://opspec.io/docs/reference/definition-format/op.yml/expressions/dir-entry-ref.html#embedded-json-file for more details
        envVars: {MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_DATABASE} # the same inputs are needed to let our code know how to connect to the DB
        workDir: /go/src/github.com/golang-ops-example
        ports: { '8080': '8080' }
        cmd:
          - sh
          - -ce
          - |
            go get -u github.com/cespare/reflex # get reflex to watch and hot-reload our main.go
            sleep 30 # we'll sleep while the MySQL DB starts
            /go/bin/reflex -g 'main.go' -s -- sh -c 'go run main.go'